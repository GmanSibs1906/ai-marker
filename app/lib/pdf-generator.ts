import jsPDF from 'jspdf';
import { MarkingResult } from './types';

export function generateMarkingPDF(
  markingResult: MarkingResult, 
  assessmentType: 'assessment' | 'project',
  logoBase64?: string
): jsPDF {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  const maxWidth = pageWidth - 2 * margin;
  let yPosition = 30;

  // Add logo if provided
  if (logoBase64) {
    try {
      // Add logo in top-right corner
      const logoWidth = 40;
      const logoHeight = 30;
      const logoX = pageWidth - margin - logoWidth;
      
      doc.addImage(logoBase64, 'PNG', logoX, 15, logoWidth, logoHeight);
    } catch (error) {
      console.warn('Failed to add logo to PDF:', error);
    }
  }

  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80); // Dark blue color
  
  const title = `${assessmentType === 'assessment' ? 'Assessment' : 'Project'} Marking Results`;
  doc.text(title, margin, yPosition);
  yPosition += 15;

  // Add Melsoft Academy branding
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(52, 73, 94); // Slightly lighter blue
  doc.text('Melsoft Academy - AI Assessment Marker', margin, yPosition);
  yPosition += 20;

  // Student and assignment information
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  
  doc.text(`Student: ${markingResult.studentName}`, margin, yPosition);
  yPosition += 8;
  
  doc.text(`Assignment: ${markingResult.assignmentTitle}`, margin, yPosition);
  yPosition += 8;
  
  if (markingResult.subject) {
    doc.text(`Subject: ${markingResult.subject}`, margin, yPosition);
    yPosition += 8;
  }
  
  doc.text(`Date Marked: ${markingResult.createdAt.toLocaleDateString()}`, margin, yPosition);
  yPosition += 15;

  // Score summary box (if available)
  if (markingResult.totalMarks || markingResult.percentage) {
    doc.setFillColor(240, 248, 255); // Light blue background
    doc.rect(margin, yPosition, maxWidth, 25, 'F');
    
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(25, 118, 210); // Blue color
    
    let scoreText = 'Final Score: ';
    if (markingResult.totalMarks) {
      scoreText += `${markingResult.totalMarks} marks`;
    }
    if (markingResult.percentage) {
      scoreText += ` (${markingResult.percentage}%)`;
    }
    
    doc.text(scoreText, margin + 10, yPosition + 15);
    yPosition += 35;
  }

  // Marking content
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(0, 0, 0);
  
  // Split content into lines that fit the page width
  const lines = doc.splitTextToSize(markingResult.markingContent, maxWidth);
  
  // Add content with page breaks if necessary
  for (let i = 0; i < lines.length; i++) {
    // Check if we need a new page
    if (yPosition > pageHeight - 30) {
      doc.addPage();
      yPosition = 30;
      
      // Add logo to new page if provided
      if (logoBase64) {
        try {
          const logoWidth = 40;
          const logoHeight = 30;
          const logoX = pageWidth - margin - logoWidth;
          doc.addImage(logoBase64, 'PNG', logoX, 15, logoWidth, logoHeight);
        } catch (error) {
          console.warn('Failed to add logo to new page:', error);
        }
      }
    }
    
    doc.text(lines[i], margin, yPosition);
    yPosition += 6;
  }

  // Footer
  const footerY = pageHeight - 15;
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by Melsoft Academy AI Assessment Marker', margin, footerY);
  doc.text(`Page 1 of ${doc.getNumberOfPages()}`, pageWidth - margin - 30, footerY);

  return doc;
}

export function downloadPDF(doc: jsPDF, fileName: string): void {
  doc.save(fileName);
}

// Convert image file to base64 for embedding in PDF
export async function imageToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      resolve(result);
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
}

// Load logo from public directory
export async function loadLogoBase64(): Promise<string | undefined> {
  try {
    const response = await fetch('/logo.png');
    if (!response.ok) {
      throw new Error('Logo not found');
    }
    
    const blob = await response.blob();
    const file = new File([blob], 'logo.png', { type: 'image/png' });
    return await imageToBase64(file);
  } catch (error) {
    console.warn('Failed to load logo:', error);
    return undefined;
  }
}

// Generate multiple PDFs for batch processing
export async function generateBatchPDFs(
  markingResults: MarkingResult[],
  assessmentType: 'assessment' | 'project'
): Promise<{ fileName: string; pdfBlob: Blob }[]> {
  const logoBase64 = await loadLogoBase64();
  
  return markingResults.map(result => {
    const doc = generateMarkingPDF(result, assessmentType, logoBase64);
    const pdfBlob = new Blob([doc.output('blob')], { type: 'application/pdf' });
    
    return {
      fileName: result.markedFileName,
      pdfBlob
    };
  });
} 